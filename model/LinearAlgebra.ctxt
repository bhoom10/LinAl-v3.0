#BlueJ class context
comment0.params=mat1\ mat2\ m\ n
comment0.target=double[][]\ addMatrix([,\ [,\ int,\ int)
comment0.text=Simple\ Addition\ of\ two\ matrices\ \n
comment1.params=mat1\ mat2\ m\ n
comment1.target=double[][]\ subtractMatrix([,\ [,\ int,\ int)
comment1.text=Simple\ subtraction\ of\ two\ matrices\ \n
comment10.params=matrix\ n
comment10.target=double\ trace([,\ int)
comment10.text=Trace\ of\ a\ matrix\n
comment11.params=matrix\ n
comment11.target=boolean\ isHessen([,\ int)
comment11.text=Checks\ if\ a\ matrix\ is\ a\ Hessenberg\ matrix\n
comment12.params=matrix\ norder
comment12.target=boolean\ islowerTriangle(double[][],\ int)
comment12.text=Finds\ if\ a\ matrix\ is\ a\ lower\ triangular\ matrix\nreturn\ false\ if\ not\ a\ lower\ triangular\ matrix\nreturns\ true\ if\ it\ is\ a\ lower\ triangular\ matrix\n
comment13.params=matrix\ norder
comment13.target=boolean\ isupperTriangle(double[][],\ int)
comment13.text=Finds\ if\ a\ matrix\ is\ a\ upper\ triangular\ matrix\nreturn\ false\ if\ not\ a\ upper\ triangular\ matrix\nreturns\ true\ if\ it\ is\ a\ upper\ triangular\ matrix\n
comment14.params=a\ n
comment14.target=double[][]\ gaussElimin([,\ int)
comment14.text=Gaussian\ elimination\ method\ on\ a\ matrix\n
comment15.params=a\ n
comment15.target=boolean\ isSingular([,\ int)
comment15.text=Checks\ if\ a\ given\ matrix\ is\ singular\n
comment16.params=a\ n
comment16.target=boolean\ isInv([,\ int)
comment16.text=Checks\ if\ a\ given\ matrix\ is\ invertible\n
comment17.params=a\ n
comment17.target=boolean\ isSym([,\ int)
comment17.text=Checks\ if\ a\ given\ matrix\ is\ symmetric\n
comment18.params=a\ n
comment18.target=double\ norm1(double[][],\ int)
comment18.text=To\ find\ 1-norm\ of\ a\ matrix\n
comment19.params=a\ m\ n
comment19.target=double[][]\ gso1([,\ int,\ int)
comment19.text=Gram\ schmidt\ orthonormalization\ method\n
comment2.params=mat\ norder
comment2.target=double\ determinant([,\ int)
comment2.text=Finding\ the\ determinant\ of\ a\ matrix\n
comment20.params=a\ m\ col
comment20.target=double[][]\ retCol([,\ int,\ int)
comment21.params=a\ m
comment21.target=double[]\ QRdecomp([,\ int)
comment21.text=QR\ decomposition\ method\ to\ return\ the\ eigen\ values\ of\ a\ matrix\n
comment22.params=a\ b\ m
comment22.target=double[]\ subArray([,\ [,\ int)
comment22.text=To\ find\ the\ subarray\ of\ the\ matrix\n
comment23.params=a\ b\ m
comment23.target=double\ dotProduct([,\ [,\ int)
comment23.text=To\ find\ the\ dot\ product\ of\ the\ two\ matrices\n
comment24.params=a\ n
comment24.target=double[]\ normalise([,\ int)
comment25.params=a
comment25.target=double[][]\ cholesky(double[][])
comment25.text=Cholesky\ factorization\n
comment3.params=n
comment3.target=int\ sign(int)
comment3.text=Returns\ a\ sign\ based\ on\ whether\ the\ number\ is\ odd\ or\ even\n-1\ if\ odd,\ 0\ if\ even\nUsed\ in\ cofactor\n
comment4.params=matrix\ norder
comment4.target=double[][]\ cofactor(double[][],\ int)
comment4.text=Returns\ the\ cofactor\ matrix\ of\ a\ matrix\nUsed\ in\ inverse\n\n
comment5.params=matrix\ excluding_row\ excluding_col
comment5.target=double[][]\ createSubMatrix(double[][],\ int,\ int)
comment5.text=Creates\ a\ matrix\ out\ of\ the\ values\ that\ are\ not\ a\ part\ of\ the\ row\ or\ column\ that\ a\ particular\ number\ belongs\ to\nused\ in\ determinant\n
comment6.params=matrix\ norder
comment6.target=double[][]\ inverse(double[][],\ int)
comment6.text=Finds\ the\ inverse\ of\ a\ matrix\n
comment7.params=matrix\ mrow\ mcol
comment7.target=double[][]\ transpose(double[][],\ int,\ int)
comment7.text=Finds\ the\ transpose\ of\ a\ matrix\n
comment8.params=matrix1\ matrix2\ row1\ row2\ col2
comment8.target=double[][]\ multiply([,\ [,\ int,\ int,\ int)
comment8.text=Multiplication\ of\ two\ matrices\ \n
comment9.params=matrix\ n
comment9.target=int\ rank([,\ int)
comment9.text=Rank\ of\ a\ matrix\n
numComments=26
